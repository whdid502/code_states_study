함수는 문제해결을 위한 고민을 논리적으로 풀어내는 작업을 하는 하나의 단위

함수는 코드의 묶음이다. 따라서 함수는 기능(function)의 단위라고 할 수 있다.

함수는 입력과 출력간의 매핑이 되며(mapping)

반드시 돌아온다(return)

- 함수의 사용 방법

1. 버튼제작(함수 선언)

선언(declaration)
function cal(param1, param2) {
    console.log(param1 + param2);
    return param1 * 10;
}

2.버튼 사용(호출)
call(10,20);

이 함수는 변수에 저장 가능하다

ex) let result = cal(10,20);

함수는 지시사항의 묶음

함수는 입력 > 함수 > 출력의 과정으로 이루어져 있다.

함수의 선언(함수선언식)

ex) function my_function(input){
        //컴퓨터에게 시킬 일
    }
    
함수 표현식

ex) let my_function = function(input){
        //컴퓨터에게 시킬 일
    };

위에서 input은 '매개변수'(parameter)라고 한다. 이는 함수 실행시 입력에 따라 바뀔 수 있는 변수지만, let등의 키워드를 사용하지 않는다.

ex) let time_to_go_home = function(speed, distance){
        let time = distance / speed;
        console.log(time);   
    }

전달인자(arguments)와 함께 함수에 전달된다.

ex) time_to_go_home(20,100) // 5

    위에서 speed 라는 파라미터에 20이라는 arguments를, distance라는 parameter에 100이라는 arguments를 전달함

위의 time_to_go_home 함수 내부에서 선언된 time이라는 함수는 함수 바깥에서 사용할 수 없다.

단, return이라는 결과를 반환해주는 키워드를 사용해주면 바깥으로 나올 수 있다.

ex) let time_to_go_home = function(speed, distance) {
        let time = distance / speed;
    };

    let my_time = time_to_go_home(20,100);
    console.log(my_time) // undefined

    >> time_to_go_home함수에서 아무것도 반환 되지 않았으므로 값이 없음.

    let time_to_go_home = function(speed, distance) {
        let time = distance / speed;
        return time 
    };

    let my_time = time_to_go_home(20,100);
    console.log(my_time) // 5

    >> time_to_go_home함수에서 time이라는 변수가 반환되었으므로 값이 존재

function get_area_of_circle(radius) {
    let pi = 3.14159;
    let area_of_circle = pi * radius * radius
    return area_of_circle
};

