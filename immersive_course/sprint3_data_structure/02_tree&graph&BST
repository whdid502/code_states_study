그래프

컴퓨터공학게서 이야기하는 자료구조 그래프는 마치 거미줄처럼 여러개의 점들이 선으로 이어져 있는 복잡한 네트워크 망 같은 모습이다./

그래프란  여러개의 점들이 서로 복잡하게 연결되어 있는 관계를 표현한 자료구조 이다.

점은 정점(vertex)라고 하고 선은 간선(edge)라고 한다.

그래프는 매일같이 사용하는 포털사이트의 검색엔진, sns, 네비게이션 등에서 사용된다.

예를 들어보자면

정점이 서울, 대전 부산

간선이 서울-대전, 대전-부산, 부산-서울

이라고 하고, 이 간선은 네비게이션에서 이동할 수 있음을 의미한다. 정점에 캐나다의 토론토를 추가한다면 어떠한 간선도 생겨나지 않기 때문에 그래프에선 이를 관계없다 라고 표현한다.

간선을 보면 서울,대전,부산이 서로 이여져 있다는 걸 알수 있지만 얼마나 떨어져 있는지는 알 수없다.

가중치(연결의 강도가 얼마나 되는지)가 적혀있지 않은 현재 그래프는 비가중치 그래프라고 부른다.

가중치그래프는

정점 : 서울, 대전, 부산

간선 : 서울- 140km-대전, 대전-200km-부산, 부산-325km-서울

무향그래프 : 앞서 살펴본 그래프, 한 정점에서 다른정점으로 갈수 있듯이 다른 정점에서 한 정점으로도 갈수 있다. 단방향 그래프는 한 정점에서 다른정점으로밖에 가지 못한다(혹은 그 반대).

진입차수(in-degree)/진출차수(out-degree) : 한 정점에 진입(들어오는 간선)하고 진출(나가는 간선)이 몇개인지를 나타낸다.

인접(adjacency) : 두 정점간의 간선이 직접 이어져 있다면 이 두정점은 인접한 정점이다.

자기루프(self loop) : 정점에서 진출하는 간선이 자기자신에게 진입하는 경우 자기루프를 가졌다 표현한다. 다른 정점을 거치지 않는 것이 특징

사이클(cycle) : 한 정점에서 출발해 다시 해당정점으로 돌아갈 수 있다면 사이클이 있다고 표현한다.

그래표 용어에서 인접은 두 정점을 바로 이어주는 간선이 있다면 두 정점은 인접하다 라고 표현한다.

다음 예시는 A라는 정점과 B라는 정점이 이어져 있다면 1, 아니라면 0을 표현한 그래프이다.(만약 가중치 그래프라면 1 대신 관계에서 의미있는 값을 저장)

ex)       A       B       C
    A     0       0       1
    B     1       0       1
    C     1       0       0

    A의 진출차수는 1개( A -> C )
      [0][2] === 1
    B의 진출차수는 2개( B -> A / B -> C )
      [1][0] === 1
      [1][2] === 1
    C의 진출차수는 1개( C -> A )
      [2][0] === 1

인접행렬을 사용할 상황
* 한개의 큰 표와 같은 모습을 한 인접행렬은 두 정점사이의 관계가 있는지 없는지 확인하기에 용이
* 예컨데 A에서 B로 진출하는 간선이 있는지 파악하기 위해 [0][1]의 값을 찾으면 됨
* 가장 빠른 경로를 찾고자 할때 주로 이용

인접 리스트
인접 리스트는 각 정점이 다른 어떤 정점과 인접한지 리스트의 형태로 볼수 있는 표현방식이다.

각 정점마다 하나의 리스트를 가지고 있으며 이 리스트에는 자신과 인접한 다른 정점들이 담겨 있다.

ex) A -> C -> Null
    B -> A -> C -> Null
    c -> A -> Null
  
B는 A와 C로 이어지는 간선이 두개인데 왜 순서가 A가 먼저일까

보통은 중요하지 않다.

우선순위르 ㄹ다루어야 한다면 더 적합한 자료구조(queue, heap)을 사용하는 것이 합리적이기 때문

인접 리스트는 연결 가능한 모든 경우의 수를 저장한다.

트리

컴퓨터공학의 자료구조에서 트리구조는 그래프의 여러 구조중 일방향 그래프의 한 구조다.

그 모습이 나무와닮아 트리라는 이름이 붙여졌고, 하나의 뿌리로부터 가지가 사방으로 뻗은 형태를 띄우고 있다.

데이터가 바로 아래에 하나 이상의 데이터에 단방향으로 연결되는 계층적 자료구조이다.

데이터를 순차적으로 나열시킨 형태인 선형구조가 아닌, 하나의 데이터 뒤에 여러개의 데이터가 존재할 수 있는 비 선형구조로 되어있고, 계층적으로 표현이 되며 아래로만 뻗기 때문에 사이클이 없다.

ex)                        A                                 ---- level 0
                 B  <---sibling--> C     <- parent Node      ---- level 1
             D          E    F         G    <- child Node    ---- level 2
        H       I                  J <- leaf Node            ---- level 3   


  트리 구조는 루트(root, 예제에선 A)라는 하나의 꼭짓점 데이터를 시작으로 여러개의 데이터를 간선으로 연결한다.
  
  이 데이터들을 Node라고 부른다. 상위 노드와 하위노드는 연결되며 부모, 자식관계를 가진다.

  자식이 없는 노드는 리프 노드(leaf Node)라고 부른다.

  트리구조는 높이와 깊이르 잴 수 있다.

  루트에서 자신에게 걸리는 거리를 레벨이라고 부르며 루트를 레벨 1로 설정한다.

  노드와 노드간의 간격을 레벨이라고 부르며 첫번째 노드인 루트를 레벨 1로 설정한다.

  루트부터 가장 안쪽에 있는 노드까지의 레벨을 트리의 높이라고 하며, 특정 노드부터 시작해 루트까지의 레벨을 노드의 깊이라고 표현한다.

  마지막으로 작은 트리의 모양새를 갖춘 트리안의 트리를 서브트리라고 한다.

  트리는 보통 컴퓨터의 디렉토리 구조를 생각가능하다.


  BST(Binsary Search Tree)

  트리는 편리한 구조를 전시하는 것 외에 효율적인 탐색을 위해 사용되기도 한다.

  자식노드가 최대 두개인 노드들로 구성된 트리를 이진트리라고 정의한다.

  이 두개의 노드는 왼쪽 자식과 오른쪽 자식으로 분류한다.

  이진트리는 자료의 삽입 삭제 방법에 따라 정 이진 트리, 완전 이진트리, 포화 이진 트리 로 나뉜다.

  완전 이진 트리 : 마지막 레벨을 제외한 모든 노드가 가득 차 있어야 하고 마지막 레벨의 노드는 전부 차 있지 않아도 되지만 왼쪽이 채워져야 한다.

  정 이진 트리 : 각 노드가 0개 혹은 2개의 자식을 갖는다.

  포화 이진 트리 : 정 이진트리이면서 완전 이진 트리인 경우다. 모든 리프노드의 레벨이 동일하고, 모든 레벨이 가득 채워져 있는 트리이다.

  모든 왼쪽 자식들은 루트나 부모보다 작은 값이며 모든 오른쪽 자식들은 루트나 부모보다 큰 값인 특징으 ㄹ가지고 있는 이진 트리를 이진 탐색 트리라고 한다.

어떤 특정한 목적을 위해 트리의 모든 노드를 한번씩 방문하는 것을 트리 순회라고 한다.

전위 순회 : 최초로 루트를 방문한뒤, 루트를 기준으로 왼쪽의 노드들을 둘러보고  탐색이 끝나면 오른쪽 탐색을 시작한다.

중위 순회 : 루트를 가운데에 두고 순회 한다. 제일 왼쪽 끝의 노드부터 순회하며 루트를 기준으로 왼쪽에 있는 노드의 순회가 끝나면 루트를 거쳐 오른쪽에 있는 노드로 이동하여 마저 탐색한다.

후위 순회 : 루트를 제일 마지막으로 순회 한다. 제일 왼쪽 끝의 노드부터 순회하기 시작하며 루트를 거치지 않고 오른쪽으로 이동해 순회한뒤 제일 마지막으로 루트를 방문한다.

그래프의 탐색은 하나의 정점을 시작으로 모든 정점들을 한번씩 탐색하는 것을 목적으로 삼는다.

배열처럼 정렬되어 있지 않아 원하는 자료를 찾을 때 까지 하나씩 모두 방문하여 찾기 때문이다.

그래프의 모든 정점 탐색방법은 여러가지 있지만, 대표적으로 두가지 방법을 꼽을 수 있다.

DFS와 BFS이다ㅣ. 이둘 모두 어떤 순서로 탐색을 하느냐만 다를 뿐, 모든 자료를 하나씩 확인해 본다는 점으 같다.

BFS(Breathed First Search)

루트를 기준으로 루타에서 가장 가까운 정점부터 탐색한다. 탐색할 정점이 없을때 그다음 떨어져 있는 정점을 순회한다.

너비를 우선적으로 탐색하는 방법으로써 너비 우선 탐색이라고도 한다.

주로 두 정점사이의 최단경로를 찾고 싶을 때 사용한다.

DFS(Depth First Search)

하나의 경로를 끝까지 탐색한 후, 찾는 정점이 아니라면 다음 경로로 넘어간다.

하나의 노선을 끝까지 확인하기에 운이 좋다면 몇번만에 다음 경로를 찾을 수 있다.

깊이를 우선적으로 탐색하기에 깊이 우선 탐색이라고 한다.

한 정점에서 시작해 다음 경로로 넘어가기 전에 해당 경로를 완벽하게 탐색하고 싶을 때 사용한다. 

BFS보다는 늦지만 완벽하게 탐색하고 싶을 때 사용한다.