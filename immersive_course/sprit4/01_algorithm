알고리즘은 '문제를 어떤식으로 푸는 것이 최선인가' 로 정의돌 수 있다.

1. 문제를 이해하라
2. 수도코드를 작성하자
3. 연습장에 전체적은 그림을 그려보자
4. 전력을 코드로 옮겨보자
5. 코드의 최적화를 시도해보자.

시간복잡도(Time Complexity)

효율적인 방법을 고민한다는것은 시간복잡도를 고민한다는것과 같다.

입력값의 증가/감소함에 따라 시간이 얼마만큼 비례하여 증가/감소 하는가

Big-O 표기법

시간복잡도를 표기하는 방법중 하나는 Big-O이다.

'최소한 이시간 이상이 걸린다' 혹은 '이정도 시간이 걸린다'를 고려하는 것보다 '이정도 시간까지 걸릴 수 있다'를 고려해야 한다.

O(1)은 constant Complexity라고 부르며 입력값이 증가해도 시간이 늘어나지 않음을 의미한다.

ex) function O_1_algorithm(arr, index) {
    	return arr[index];
    }

    let arr = [1, 2, 3, 4, 5];
    let index = 1;
    let result = O_1_algorithm(arr, index);
    console.log(result); // 2

O(n)은 입력값이 증가함에 따라 같은 비율로 시간또한 증가함을 의미한다.

입력값이 1일때 1초가 걸린다면 입력값이 100이면 100초가 걸리는 것이다.

ex) function O_n_algorithm(n) {
    	for (let i = 0; i < n; i++) {
    	// do something for 1 second    
    	}
    }

    function another_O_n_algorithm(n) {
	    for (let i = 0; i < 2n; i++) {
	    // do something for 1 second
	    }
    }

O(log n)은 O(1)다음으로 빠른 시간 복잡도를 지닌 표기법이다.

BST가 이 방법에 해당된다.

O(n**2)은 입력값의 증가와 시간이 제곱의 비율로 증가함을 의미한다.

ex) function O_quadratic_algorithm(n) {
    	for (let i = 0; i < n; i++) {
	    	for (let j = 0; j < n; j++) {
    		// do something for 1 second
    		}
	    } 
    }

    function another_O_quadratic_algorithm(n) {
    	for (let i = 0; i < n; i++) {
	    	for (let j = 0; j < n; j++) {
    			for (let k = 0; k < n; k++) {
	    		// do something for 1 second
    			}
    		}
    	}
    }

O(2**n)은 가장 느린 시간복잡도를 지닌 표기법이다.

ex) function fibonacci(n) {
    	if (n <= 1) {
    		return 1;
    	}
    	return fibonacci(n - 1) + fibonacci(n - 2);
    }

대표적으로 재귀로 구현하는 피보나치 수열이 이에 해당한다.

데이터 크기 제한      예상되는 시간 복잡도
n <= 1,000,000        O(n) or O(log n)
n <= 10,000           O(n**2)
n <= 500              O(n**3)

탐욕 알고리즘(Greedy Algorithm)

탐욕 알고리즘의 사전적 정의는 말 그대로 '탐욕스러운, 욕심많은'dlfks EMtdmf wlslsek.

탐욕 알고리즘은 결정의 순간마다 당장 눈앞에 보이는 최적의 상황만을 쫒아 최종적인 해답에 도달하는 방법이다.

1. 선택절차(Selection Procedure) : 현재 상태에서 최적의 해답을 선택한다.
2. 적절성 검사(Feasibility Check) : 선택된 해가 문제의 조건을 만족하는지 검사한다,
3. 해답 검사(Solution Check) : 원래의 문제가 해결되었는지 검사하고, 해결되지 않았따면 1번으로 돌아가 위 과정을 반복한다.

탐욕 알고리즘은 문제를 해결하는 과정에서 그 순간순간 마다 최적이라 생각하는 해답을 찾으며, 이를 토대로 최종문제의 해답에 도달하는 문제해결 방식이다.
하지만 항상 최적의 결과를 보장하지는 못한다.

따라서 아래 2가지 조건을 성립하여야 한다.

1. 탐욕적 선택 속성(Greedy Choice Property) : 앞의 선택이 이후의 선택에 영향을 주지 않는다.
2. 최적 부분 구조(Optimal Substructure) : 문제에 대한 최종 해결 방법은 부분문제에 대한 최적 문제 해결 방법으로 구성된다.

동적 계획법(Dynamic Programing)

동적 계획법은 모든 경우의 수를 따져 본 후 이를 조합해 최적의 해법을 찾는 방식이다.

원리는 간단하다. 주어진 문제를 여러개의 하위문제로 나누어 풀고, 하위문제들의 해결방법을 결합하여 최종 문제를 해결하는 방식이다.

하위 문제를 계산한뒤 해결책을 저장하여 같은 하위문제가 놔와도 저장된 해결책을 이용하여 계산횟수를 줄임으로써 알고리즘을 개선하는 방법이다.

동적 계획법은 아래의 조건이 필수이다.

1. Overlapping Sub-problems : 큰 문제를 작은 문제로 나눌 수 있고, 이 작은 문제들은 중복된다.
2. Optimal Substructure : 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 같다. 즉, 작은 문제에서 구한 정답을 큰 문제에서도 사용할 수 있다.

첫번째 조건은 큰 문제로부터 나누어진 작은 문제는 큰 문제를 해결할때 여러번 사용할 수 있어야 된다는 말이다.

주어진 문제를 단순히 반복계산하여 해결하는것이 아닌 작은 문제의 결과가 큰문제를 해결하는 데에 여러번 사용될 수 있어야 한다.

두번째 조건은 정답의 최적해결방법을 의미한다. 이는 주어진 문제에 대한 최적의 해법을 구하고자 할때, 그것의 작은 문제들의 최적 해법을 찾은 후 그것들을 결합하면 결국 전체문제의 최적 해법을 구할 수 있다.

