상태란 UI에 동적으로 표현될 데이터

상태에 따라서 상태가 변경하는 곳과 그 변경함에 따라 영향을 받아 변경되는 곳이 있다

side effect란 합수의 입력 외에도 함수에 결과에 영향을 미치는 요인이다.

대표적으로 네트워크 요쳥, API호출이 side effect이다.

react의 주요개발 원칙중 하나는 ui를 페이지가 아닌 컴포넌트 단위로 구분해서 보는것이다. 이런 것을 컴포넌트 우선 개발 방식이라고한다

이런 컴포넌트는 굳이 가짜 데이터가 들어오더라도 문제없이 작동해야 한다.

컴포넌트는 표현 그자체에 집중해야 한다.

하지만 앱을 만들다 보면 side effect는 불가피하다.

예컨데 api를 받아오는 대기시간, 로딩중인 상태도 고려해야 한다.

상태를 두가지로 분류해보자면 전역과 로컬로 나눌 수 있다

로컬은 특정 컴포넌트 안에서만 관리되는 상태, 전역은 프로덕트 전체 혹 여러 컴포넌트에서 관리되는 상태이다.

다른 컴포넌트와 데이터를 공유하지 않는 form데이터는 대부분 로컬상태이다. input box, select box가 이에 해당된다.

서로 다른 컴포넌트가 사용하는 상태가 다르다면 꼭 전역상태일 필요는 없다. 출처가 달라도 된다는뜻이다

하지만 서로 다른 컴포넌트가 같은 상태를 사용한다면 이 출처는 반드시 한곳이어야 한다.

하나의 출처를 사용한다는 것은 전역상태를 의미한다.

데이터 무결성이란 데이터의 정확성을 보장하기 위해서 데이터의 변경이나 수정 시 제한을 두어 안정성을 저해하는 요소를 막고 데이터상태를 항상 옳게 유지하는 것이다

무결성을 위해 동일 데이터는 항상 같은곳에서 가져와야 한다.

props dirling(프로퍼티 내려꽂기)하위 컴포넌트의 필요에 의해 그보다 상위 컴포넌트가 굳이 필요하지 않는 props를 받아 넘겨주는 것을 의미한다

이는 전역상태 저장소가 있고, 어디서든 해당 저장소에 접근가능하다면 해결가능하다. 이를 위한 툴이 상태관리를 위한 툴이다. 대표적으로 redux, react context, mobx가 있다

