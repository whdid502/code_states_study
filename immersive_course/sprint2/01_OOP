OOP(Object Orinted Programing, 객체지향 프로그래밍)

객체지향 프로그래밍의 특징 주 ㅇ하나는 현실세계의 모델을 코드로 옮기는데 유리하다는 것이다.

초기의 프로그래밍 언어는 절차적 언어이다. 절차적 언어란 순차적인 명령의 조합을 뜻한다.

객체지향 언어는 '클래스'라고 부르는 데이터 모델의 청사진을 사용해 코드를 작성한다.

현대의 언어들은 대부분 객체지향 특징을 지닌다.

객체지향 프로그래밍은 프로그램 설계 철학이다.

객체지향 프로그래밍의 모든것은 객체로 그룹화 된다. 이 객체는 한번 만들고 나면, 메모리상에서 반환되기 전까지 객체 내의 모든것이 유지된다.

4가지 주요 개념을 통해 재사용성을 얻을 수 있다.

클래스는 일종의 원형으로 객체를 생성하기 위한 아이디어나 청사진이다.

세부사항이 들어가지 않은 청사진을 말하며 세부사항만 넣는다면 객체가 되는 것이다.

클래스를 통해 만들어진 객체를 인스턴스라고 부른다.

클래스는 객체를 만들기 위한 생성자 함수를 포함한다.

ex)
    class car 
    color;price;speed
    start()
    backword()
    forword()
    stop()

    car라는 클래스에는 색상,가격,속도같은 고유의 속성이 있고, 시작,후진,전진,멈춤 과 같이 기능이 메소드로 존재한다.

객체지향의 4가지 기본개념은 캡슐화(Encapsulation),상속(Inheritance),추상화(Abstraction),다형성(Polymorphsim)이 있다.

캡슐화란 데이터와 기능을 하나의 단위로 묶는것
        은닉 : 구현은 숨기고 동작은 노출시킴
        느슨한 결합에 유리 : 언제든 구현을 수정할 수 있음

켑슐화란 외부에서 속성과 기능을 따로 정의하는 것이 아닌 하나의 객체 안에 넣어서 묶는 것이다.

여기엔 은닉화라는 특징도 포함되는데 내부데이터나 내부 동작이 외부로 노출되지 않도록 만드는 것이다. 고로, 디테일한 구현이나 데이터는 숨기고 동작만 노출해야 한다.

엄격한 클래스의 경우 직접적인 접근을 막고 설정하는 함수(setter), 불러오는 함수(getter)를 철저히 나누기도 한다.

또한 느슨한 결합을 할 수 있도록 돕는것 또한 장점이다. 객체내의 메소드 구현만 수정해도 코드의 흐름은 바뀌지 않는다.

추상화란 내부구현은 아주 복잡한데 실제로 노출되는 부분은 단순하게 만든다는 개념이다.

이런 추상화를 통해 인터페이스가 단순해진다. 너무많은 기능이 노출되면 예기치 못한 사용상의 변화가 일어날 수 있다.

추상화는 캡슐화와 헷갈릴 수 있다.

캡슐화는 코드나 데이터의 은닉에 포커스가 맞춰져 있다면 추상화는 클래스를 사용하지 않는 사람이 필요하지 않은 메소드 등을 노출시키지 않고, 단순한 이름으로 정의하는것에 포커스가 맞추어져 있다.

상속은 부모클래스의 특징을 자식클래스가 물려받는 것이다.

부모/자식 으로도 이야기 하지만 자세하게 설명하는 것은 기본(base class)/파생(derive class)가 더 적합하다.

기본 클래스의 늑징을 파생클래스가 상속받는다.

다형성이란 다양한 형태를 가질 수 있다는 말이다.

객체가 똑같은 메소드라 하더라도 다양한 다른 방식으로 구현될 수 있다.

예컨데 html의 textbox, select, checkbox등은 element라는 클래스에서 생성된 객체들이다.

이들은모두 render라는 메소드를 가지고 있는데 다형성의 핵심은 이 render는 조금씩 다르게 작동한다는 것에 있다.

만약 언어자체에서 다형성을 제공하지 않는다면 부모클래스에 종류별로 분기를 시켜서 하나하나 다르게 만들어야 할것이다.

혹은 각각의 자식클래스에 별도로 다른 render함수를 만들 수 있겠지만 엘리먼트라는 클래스의 본질상 화면에 뿌리는 render는 부모가 갖고 있는게 합리적이다.

객체지향프로그래밍의 주요 장점
1. 캡슐화는 코드가 복잡히지 않게 하고 재사용성을 높인다
2. 추상화는 코드가 복잡하지 않게 하고 단순화된 사용으로 인해 변화에 대한 영향을 최소화한다.
3. 상속은   불필요한 코드를 줄요 재사용성을 높인다
4. 다형성은 동일한 메소드에 대해 객체에 특성에 맞게 달리 출력되게 한다.

