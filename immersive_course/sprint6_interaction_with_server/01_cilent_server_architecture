클라리언트 서버 아키텍쳐(2티어 아키텍쳐)

인터넷 연결이 없는 쇼핑몰은 동작하지 않는다. 왜냐하면 상품정보를 인터넷 어디인가에 존재하는 서버로부터 받아오기 대문이다.

서버란 말그대로 제공하는 주체이다.

판매하려는 상품 정보가 쇼핑몰 앱 안에 전부 담긴경우라면 인터넷없이 작동하겠지만 문제가 발생한다.

쇼핑몰앱이 1.0에서 1.1로 업데이트되면 앱 전체를 업데이트 해야한다. 많은 리소스가 필요하다. 또한 결제같은 은행서버와 연결이 필요한 행위 또한 불가능하다.

이처럼 상품 정보와 같은 리소스가 존재하는 곳과 리소스를 사용하는 앱을 분리시킨 것을 2티어 아키텍쳐라고 부른다.(혹은 클라이언트-서버 아키텍쳐)

리소스를 사용하는 곳이 클라리언트, 리소스가 존재하는 곳을 서버라고 한다.

보통 서버는 리소스를 전달해 주는 역할만 할뿐 리소스를 따로 저장해 주는 공간을 데이터베이스라고 부른다

이처럼 클라이언트 - 서버 - 데이터베이스 의 형태를 3티어 아키텍쳐 라고 부른다.

프론트엔드 개발자는 클라리언트를, 백엔드개발자는 서버와 데이터베이스를 다룬다.

API(Application Programing Interface)

클라이언트와 서버의 통신은 요청과 응답으로 구분된다. 요청이 있어야만 응답이 온다.

프로토콜이란 통신 규약, 즉 약속이다.

웹 어플리케이션 아키텍쳐에서는 HTTP라는 프로토콜을 이용햬써 써로 떄화를 나눈다.

이때 HTTP를 이용해 주고받는 메시지를 'HTTP 메세지'라고 부른다.

규약이라는 측면에서의 프로토콜은 반드시 지켜야 함을 의미한다.

API는 서버가 클라이언트에게 리소스를 잘 활용할 수 있도록 제공하는 인터페이스이다.

API의 사전적 의미는 의사소통이 가능하도록 만들어진 접점을 의미한다.

보통 인터넷에 있는 데이터를 요청시 HTTP라는 프로토콜을 사용하며, 주소(URL, URI)를 통해 접근할 수 있다.

HTTP API디자인에는 Best Practice가 존재한다. 바로 사용자 관리 API이다.

URL디자인은 비교적 단순하지만 '메소드'라는 개념이 존재한다.

리소스를 그저 달라고 하는 요청은 GET 메소드, 사용자 관리 API에 사용자를 추가해달라는 CREATE, 지워달라는 DELETE등등이 있다.

HTTP의 메소드중 기억해야 할것은 다음과 같다,

조회(read) : GET

추가(create) : POST

갱신(update) : PUT or PATCH

삭제(delete) : DELETE


dynamic web page

서버와 자유롭게 통신하고 페이지 깜빡임 없이 작동하는 페이지

js를 통해 dom을 건드리는 방식을 채용

서버와 자유롭게 통신할수 있는 XHR의 등장

이 둘을 합쳐 ajax라고 한다.


