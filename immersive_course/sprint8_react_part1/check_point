JSX
컴포넌트 형태로 작성하며, 상태의 캡슐화에 용이하다
캡슐화 => 필요한것을 한곳에 담는다 / 은닉
* 한 콤포넌트의 state는 다른 컴포넌트의 state에서 수정할 수 없다.
* 하위(자식) 컴포넌트로 state를 props로 전달해줘야만가능하다 => state에 직접 접근한것은 아니다

하나의 JSX표현식을 render하거나, 함수 컴포넌트에서는 return해야한다,

ex) const hello = <div onChange={() => {}}>Hello wolrd!</div>

알고 보니 결국 DOM처럼 코드가 작성된다. JSX가 특별한 것은 안디ㅏ.

ex) const hello = <h1>hello wolrd!</h1>

    const hello = React.createElement('h1',null,'hello wolrd!')

상태 : 한 애플리케이션의 컴포넌트중 바뀔 수 있는 부분의 상태

React State : 코드 레벨 에서 위와 같은 데이터를 뽑아서 관리하기 위해 만들었다. 변할 수 있다
=> 컴포넌트에서 변화가 필요한 데이터는  state로 정의한다.

하위 컴포넌트의 상태 : 지역 상태 : local state

모든 페이지에 영향을 주는 상태 : 전역 상태 : global state

1. props와 state의 차이

state : 컴포넌트에 변화가 필요한 데이터

props : 컴포넌트의 속성 => read-only => immutable

  * 상위 컴포넌트에 하위 컴포넌트로 전달되는 데이터

  * read-only => 함부러 중간에 수정을 할 수 있으면. 우리가 원하는 데로 작동할 수 없다.

  