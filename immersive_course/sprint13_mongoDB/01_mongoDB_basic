mongoDB는 nosql데이터베이스이다

nosql은 매우 넓은 범위에서 사용하는 용어로 관계형 테이블의 레거시한 방법을 사용하지 않는 데이터 저장소를 의미한다

즉 행과 열이 아닌 체계제거인 방식으로 저장한다

정의를 좀더 좁혀보자면 mongoDB는 nosql도큐먼트 데이터 베이스이다.

mongoDB에서 데이터는 도큐먼트 형태로 저장된다.

이 도큐먼트들을 컬렉션이라고 부르는 곳에 저장되며 이것이 mognoDB가 nosql데이터베이스로 분류되는 이유이다

nosql기반 비관계형 데이터베이스가 사용되는 경우
1. 데이터의 구조가 거의 또는 전혀 없는 대용량의 데이터를 저장하는 경우
2. 클라우드 컴퓨팅 및 저장공간을 최대한 활용하느 ㄴ경우
3. 빠르게 서비스를 구축하고 데이터 구조를 자주 업데이트 하는 경우

atlas cloud

mongoDB는 아틀라스를 사용하여 클라우드에서 데이터베이스를 섲렁한다

이는 gui및 shell로 데이터를 시각화, 분석, 내보내기 및 빌드하는데 사용될 수 있다

아틀라스 사용자는 클러스터를 배포할 수 있으며 이는 그룹화된 서버에 데이터를 저장한다

인스턴스들의 모임을 하나의 클러스터라고 하며 하나의 시스템처럼 작동한다

단일 클러스터에서 각각 인스턴스는 동일한 복제본을 가지고 있으며 이 모음을 레플리카 세트라고 한다

클러스터를 이용하여 배포할 경우 이는 자동으로 레플리카 세트를 생성한다

레플리카 세트는 데이터의 사본을 저장하는 인스턴스의 모음이다

인스턴스중 하나에 문제가 발생하더라고 데이터는 그대로 유지되며 나머지 레플리카 세트의 인스턴스에 저장된 데이터로 작업 가능하다

레플리카 세트 : 동일한 데이터를 저장하는 소슈의 연결된 머신 중 하나에 문제가 발생하더라고 데이터가 그대로 유지되도록 한다
인스턴스 : 로컬 또는 클라우드에서 특정 소프트웨어를 실행하는 딘얼 머신, mognoDB에서는 데이터베이스이다
클러스터 : 데이터를 저장하는 서버 그룹

도큐먼트는 개체와 같이 데이터를 필드-값 쌍으로 저장하고 구성한다.

도큐먼트에서 필드느 ㄴ데이터의 고유한 식별자이고 값은 주어진 식별자와 관련된 데이터를 뜻한다.

도큐먼트 : 필드-값 쌍으로 저장된 데이터
필드 : 데이터포인트를 위한 고유한 식별자
값 : 주어진 식별자와 관계된 데이터
컬렉션 : mognoDb의 도큐먼트로 구성된 저장소로 일반적으로 도큐먼트 간의 공통 필드가 있다. 데이터베이스당 많은 컬렉션이 있고 컬렉션당 많은 도큐먼트가 있을 수 있다

도큐먼트를 shell을 이용하여 조회하거나 업데이트할때 도뮤먼트는 json형식으로 출력된다

json형식으로 도큐먼트를 작성하기 위해 만족해야될 조건
1. 중괄호로 도큐먼트가 시작되고 끝나야함
2. 필드와 값이 콜론으로 분리되어야 하며 필드와 값을 포함하는 쌍은 쉼표로 나뉘어야 한다
3. 필드도 문자열이기 때문에 쌍따옴표로 감싸야 한다

json형태의 데이터로 저장할때의 단점
1. json은 텍스트 형식이라 가독성은 좋지만, 파싱이 느리고 메모리사용에 있어서 비효율적이다
2. json은 기본 데이터타입만 지원하기때문에 사용가능한 타입에 제한이 있다

위 문제를 해결하기 위해 BSON( bisnary json)이 도입되었다

mongoDB는 json형태로 작성된 것은 무엇이든 데이터베이스에 추가할 수 있고 쉽게 조회할 수 있지만 속도, 효율성 유연성의 장점이 있기 때문에 내부적으로는 bson형태로 데이터를 저장 사용한다

imporing & exporting

mongoDB는 bson형태로 저장되고 json형태로 출력된다.

json형식으로 데이터를 가져오고 내보내기 위한 mongoimport, mongoexport

bson형식으로 데이터를 가져오고 내보내기 위한 mongostore, mongodump

exporting

mongodump --uri '<atlas cluster uri>'

mongoexport --uri '<atlas cluster uri>'
            --collection=<collection name>
            --out=<filename>.json

위 명령어를 위해서 atlas cluster uri가 필요하다

importing

mongostore --uri '<atlas cluster uri>'
           -- drop dump

mongoimport --uri'<atlas cluster uri>'
            --drop=<filename>.json