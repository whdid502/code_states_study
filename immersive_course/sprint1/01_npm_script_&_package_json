node.js는 서버를 만드는 환경이라고 오해하는 이가 많다. 심지어 node.js가 백엔드 환경이라 생각하는 사람도 있다.

전혀 어니다.

node.js를 통해 웹서버를 만들수 있기에 이런 오해가 발생한다.

node.js는 DOM이 존재하지 않는다.

이 말은 window객체, document 객체가 존재 하지 않는다는 것이고, document.queryselector같은 것도 없다.

window대신 global이라는 키워드가 존재한다. 다만 완전히 똑같지는 않다.

그리고 fetch API가 존재하지 않는다. 서버에 요청시 다른 방법을 사용한다.

프론트엔드에서 node.js는 npm생태계를 활용한다. cli에서 다양한 자동화 과정을 처리하는 경우가 많다.

npm vs package.json

하나의 프로그램은 다양한 모듈이 합쳐져 만들어 진다. 우리는 우리보다 잘하는 사람들이 만들어 놓은 검증된 코드(모듈)을 가져다 사용한다.

이러한 남이 만들어 놓은 모듈을 node.js에서 npm모듈이라는 이름으로 부르며, 이에 대한 정보를 담아 둔 곳이 바로 package,json이다.

node.js환경에서 외부 라이브러리를 다운받기 위한 다양한 방법중 가장 대표적인건 npm이다.

npm 은 node package manager로 일종의 앱스토어이다. 필요한 모듈을 다운할 수 있는 모듈 스토어이다.

package.json에는 이 프로그램을 실행시키기 위해 필요한 모듈이 무엇인지, 프로그램을 실행시키는 방법, 프로그램을 테스트 하는 방법등이 명시되어 있다.

중요한 것은 실행시키기 위해 필요한 실제 모듈은 따로 node_modules이라는 폴더에 저장된다는 것이다. package.json에는 어떤 모듈인지만 적혀있다.

package.json의 장점은 프로젝트 코드를 전달시 모든 모듈을 설명할 필요가 없다는 것이다.

package.json살펴보기

devDependencies는 개발이나 실행에 필요한 모듈이다. 실제 프로젝트 동작에 직접적으로 영향을 주지 않는 모듈이다.

dependencies는 직접 실행과 관련이 있는 모듈이다.

