es6에서 새로 도입된 화살표 함수는 function키워드를 화살표로 축약해서 표시하는 다른 방법이다.

ex) const add = function(x,y){
      return x+y
    } // 기존 함수

    const add = (x,y) => {
      return x+y
    } // 화살표 함수

화살표 함수는 function키워드를 화살표로 축약해서 표시한다.

함수의 본문에 return만 있는 경우 화살표 함수는 return과 {}를 생략한다.

ex) const add = (x,y) => x + y // 정상작동
    const add = (x,y) => {x + y} // undefined리턴
    const add = (x,y) => (x + y) // 정상작동

함수 내 표현식이 두줄 이상일 경우엔 return을 생략하지말고 명시적으로 사용하는 것이 좋다.

ex) // bad
    const getStudentAvg = arr => arr.filter(person => person.job === 'student').reduce((sum, person) => (sum + person.grade), 0)

    // good
    const getStudentAvg = arr => {
      return arr
        .filter(person => person.job === 'student')
        .reduce((sum, person) => (sum + person.grade), 0)

화살표 함수는 클로저를 표현시 더 강하다.

ex) const adder = function (x) {
      return function(y){
        return x + y
      }
    }

    adder(5)(7) // 12

    >>

    const adder = (x) => {
      return (y) => {
        return x + y
      }
    }

    >>

    const adder = x => {
      return y => x + y
    }

    >>

    const adder = x => y => x + y

spread 문법

주로 배열을 풀어서 인자로 전달하거나, 배열을 풀어서 각각의 요소로 넣을때 사용한다,

ex) function sum(x,y,z){
      return x + y + z
    }

    const numbers = [1,2,3]

    sum(...numbers) // 6

rest 문법

파라미터를 배열의 형태로 받아서 사용가능하다. 파라미터 개수가 가변적일때 유용하다.

ex) function sum(...theArgs){
      return theArgs.reduce(pre,cur) => {
        return pre + cur
      }
    }

    sum(1,2,3) // 6
    sum(1,2,3,4) // 10

spread문법은 배열에서 강력함을 보여준다,

ex) let parts = ['shoulders', 'knees']
    let lyrics = ['head', ...parts, 'and', 'toes']

    console.log(lyrics) // [ 'head', 'shoulders', 'knees', 'and', 'toes' ]

    let arr1 = [0,1,2]
    let arr2 = [3,4,5]

    arr1 = [...arr1, ...arr2]

    console.log(arr1) // [ 0, 1, 2, 3, 4, 5 ]

배열 복사

ex) let arr = [1,2,3]
    let arr2 = [...arr]
    arr2.push(4)

    console.log(arr) // [1,2,3]
    console.log(arr2) // [1,2,3,4]

객체에 사용하기

ex) let obj1 = {foo : 'bar', x : 42}
    let obj2 = {foo : 'baz', y : 13}

    let clone_obj1 = {...obj1} 
    let merged_obj = {...obj1, ...obj2}

    console.log(merged_obj) // { foo: 'baz', x: 42, y: 13 }

함수에서 나머지 파라미터 받아오기

ex) function my_fun(a,b,...manyMoreArgs){
      console.log('a',a)
      console.log('b',b)
      console.log('manyMoreArgs',manyMoreArgs)
    }

    my_fun('one','two','three','four','five','six')

    //a one
    //b two
    //manyMoreArgs [ 'three', 'four', 'five', 'six' ]